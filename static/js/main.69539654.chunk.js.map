{"version":3,"sources":["components/Logo/brain.png","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/FaceRecognition/FaceRecognition.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Logo","react_default","a","createElement","className","tilt_default","options","max","style","height","width","src","brain","alt","ImageLinkForm","_ref","onInputChange","onButtonSubmit","type","onChange","onClick","FaceRecognition","imageUrl","box","id","map","face","key","concat","topRow","top","right","rightCol","bottom","bottomRow","left","leftCol","particlesOptions","particles","number","value","density","enable","value_area","app","Clarifai","App","apiKey","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","input","target","calculateFaceLocation","data","faceArr","faceCount","outputs","regions","length","image","document","getElementById","Number","i","clarifaiFace","region_info","bounding_box","obj","left_col","top_row","right_col","bottom_row","push","displayFaceBox","state","models","predict","FACE_DETECT_MODEL","then","response","result","catch","err","console","log","particles_default","params","components_Logo_Logo","components_ImageLinkForm_ImageLinkForm","components_FaceRecognition_FaceRecognition","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.69539654.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain.ff8a4ad9.png\";","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport \"./Logo.css\";\r\nimport brain from './brain.png';\r\n\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className=\"ma4 mt0\">\r\n            <Tilt className=\"Tilt br2 shadow-2\" options={{ max : 55 }} style={{ height: 100, width: 100}} >\r\n                <div className=\"Tilt-inner pa 3\"><img src={brain} alt =\"logo\"/></div>\r\n            </Tilt>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport \"./ImageLinkForm.css\";\r\n\r\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit }) =>{\r\n    return(\r\n        <div>\r\n            <p className=\"f3\">\r\n                {'This Magic Brain will detect faces in your pictures. Give it a try'}\r\n            </p>\r\n            <div className=\"center\">\r\n                <div className=\"form center pa4 br3 shadow-5\">\r\n                    <input className=\"f4 pa2 w-70 center\" type=\"text\" onChange={onInputChange} />\r\n                    <button className=\"w-30 grow f4 link ph3 pv2 dib white bg-light-purple\" onClick={onButtonSubmit}>Detect</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageLinkForm;","import React from 'react';\r\nimport './FaceRecognition.css';\r\n\r\nconst FaceRecognition = ({ imageUrl, box }) => {\r\n    return(\r\n        <div className=\"center ma\">\r\n            <div className=\"absolute mt2\">\r\n                <img id='inputImage' src={imageUrl} alt=\"\" width=\"500px\" height=\"auto\"/>\r\n                {\r\n                    box.map((face) => {\r\n                        return <div key={`${face.topRow}`} className=\"bounding-box\" style={{top: face.topRow, right: face.rightCol, bottom: face.bottomRow, left: face.leftCol}}></div>\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FaceRecognition;","import React, { Component } from 'react';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport './App.css';\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\n\nconst particlesOptions={\n  particles: {\n    number: {\n      value: 110,\n      density:{\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n}\n\nconst app = new Clarifai.App({apiKey: '5c2fa2295d01435ebeff117ba8f4a2b5'});\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state ={\n      input: '',\n      imageUrl: '',\n      box: []\n    }\n  }\n\n  onInputChange = (event) =>{\n    this.setState({input: event.target.value})\n  }\n\n  calculateFaceLocation = data =>{\n    let faceArr = [];\n    const faceCount = data.outputs[0].data.regions.length;\n    const image = document.getElementById('inputImage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    for(let i = 0; i < faceCount; i++){\n      let clarifaiFace = data.outputs[0].data.regions[i].region_info.bounding_box;\n      let obj = {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - (clarifaiFace.right_col * width),\n        bottomRow: height - (clarifaiFace.bottom_row * height)\n      }\n      faceArr.push(obj);\n    }\n\n    return faceArr;\n  }\n\n  displayFaceBox = box => this.setState({box: box});\n\n\n  onButtonSubmit = () => {\n    this.setState({imageUrl: this.state.input});\n\n    app.models\n    .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n    .then(response => this.calculateFaceLocation(response))\n    .then(result => this.displayFaceBox(result))\n    .catch(err => console.log(err));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Particles className=\"particles\"\n        params={particlesOptions}\n      />\n      <Logo />\n      <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit} />\n      <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}